/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/": {
    get: {
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/users": {
    get: {
      parameters: {
        query: {
          user_id?: parameters["rowFilter.users.user_id"];
          first_name?: parameters["rowFilter.users.first_name"];
          last_name?: parameters["rowFilter.users.last_name"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["users"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** users */
          users?: definitions["users"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          user_id?: parameters["rowFilter.users.user_id"];
          first_name?: parameters["rowFilter.users.first_name"];
          last_name?: parameters["rowFilter.users.last_name"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          user_id?: parameters["rowFilter.users.user_id"];
          first_name?: parameters["rowFilter.users.first_name"];
          last_name?: parameters["rowFilter.users.last_name"];
        };
        body: {
          /** users */
          users?: definitions["users"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/replies": {
    get: {
      parameters: {
        query: {
          reply_id?: parameters["rowFilter.replies.reply_id"];
          comment?: parameters["rowFilter.replies.comment"];
          user_id?: parameters["rowFilter.replies.user_id"];
          post_id?: parameters["rowFilter.replies.post_id"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["replies"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** replies */
          replies?: definitions["replies"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          reply_id?: parameters["rowFilter.replies.reply_id"];
          comment?: parameters["rowFilter.replies.comment"];
          user_id?: parameters["rowFilter.replies.user_id"];
          post_id?: parameters["rowFilter.replies.post_id"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          reply_id?: parameters["rowFilter.replies.reply_id"];
          comment?: parameters["rowFilter.replies.comment"];
          user_id?: parameters["rowFilter.replies.user_id"];
          post_id?: parameters["rowFilter.replies.post_id"];
        };
        body: {
          /** replies */
          replies?: definitions["replies"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/posts": {
    get: {
      parameters: {
        query: {
          post_id?: parameters["rowFilter.posts.post_id"];
          title?: parameters["rowFilter.posts.title"];
          content?: parameters["rowFilter.posts.content"];
          likes?: parameters["rowFilter.posts.likes"];
          user_id?: parameters["rowFilter.posts.user_id"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["posts"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** posts */
          posts?: definitions["posts"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferPost"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          post_id?: parameters["rowFilter.posts.post_id"];
          title?: parameters["rowFilter.posts.title"];
          content?: parameters["rowFilter.posts.content"];
          likes?: parameters["rowFilter.posts.likes"];
          user_id?: parameters["rowFilter.posts.user_id"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          post_id?: parameters["rowFilter.posts.post_id"];
          title?: parameters["rowFilter.posts.title"];
          content?: parameters["rowFilter.posts.content"];
          likes?: parameters["rowFilter.posts.likes"];
          user_id?: parameters["rowFilter.posts.user_id"];
        };
        body: {
          /** posts */
          posts?: definitions["posts"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
}

export interface definitions {
  users: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    user_id: string;
    /** Format: text */
    first_name?: string;
    /** Format: text */
    last_name?: string;
  };
  replies: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    reply_id: string;
    /** Format: text */
    comment: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `users.user_id`.<fk table='users' column='user_id'/>
     */
    user_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `posts.post_id`.<fk table='posts' column='post_id'/>
     */
    post_id: string;
  };
  posts: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    post_id: string;
    /** Format: text */
    title: string;
    /** Format: text */
    content: string;
    /** Format: integer */
    likes: number;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `users.user_id`.<fk table='users' column='user_id'/>
     */
    user_id: string;
  };
}

export interface parameters {
  /**
   * @description Preference
   * @enum {string}
   */
  preferParams: "params=single-object";
  /**
   * @description Preference
   * @enum {string}
   */
  preferReturn: "return=representation" | "return=minimal" | "return=none";
  /**
   * @description Preference
   * @enum {string}
   */
  preferCount: "count=none";
  /**
   * @description Preference
   * @enum {string}
   */
  preferPost:
    | "return=representation"
    | "return=minimal"
    | "return=none"
    | "resolution=ignore-duplicates"
    | "resolution=merge-duplicates";
  /** @description Filtering Columns */
  select: string;
  /** @description On Conflict */
  on_conflict: string;
  /** @description Ordering */
  order: string;
  /** @description Limiting and Pagination */
  range: string;
  /**
   * @description Limiting and Pagination
   * @default items
   */
  rangeUnit: string;
  /** @description Limiting and Pagination */
  offset: string;
  /** @description Limiting and Pagination */
  limit: string;
  /** @description users */
  "body.users": definitions["users"];
  /** Format: uuid */
  "rowFilter.users.user_id": string;
  /** Format: text */
  "rowFilter.users.first_name": string;
  /** Format: text */
  "rowFilter.users.last_name": string;
  /** @description replies */
  "body.replies": definitions["replies"];
  /** Format: uuid */
  "rowFilter.replies.reply_id": string;
  /** Format: text */
  "rowFilter.replies.comment": string;
  /** Format: uuid */
  "rowFilter.replies.user_id": string;
  /** Format: uuid */
  "rowFilter.replies.post_id": string;
  /** @description posts */
  "body.posts": definitions["posts"];
  /** Format: uuid */
  "rowFilter.posts.post_id": string;
  /** Format: text */
  "rowFilter.posts.title": string;
  /** Format: text */
  "rowFilter.posts.content": string;
  /** Format: integer */
  "rowFilter.posts.likes": string;
  /** Format: uuid */
  "rowFilter.posts.user_id": string;
}

export interface operations {}

export interface external {}
